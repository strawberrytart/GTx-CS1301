#Earlier in the course, you implemented a function that could
#find if someone had won a particular game of either tic-tac-
#toe or mancala based on a 2D list or tuple representing the
#current game board.
#
#In this problem, you'll do the same thing, but for the game
#Connect 4. Write a function called check_winner which takes
#as input a 2D list. It should return "X" if there are four
#adjacent "X" values anywhere in the list (row, column,
#diagonal); "O" if there are four adjacent "O" values
#anywhere in the list; and None if there are neither.
#
#Here are the ways Connect-4 is different from tic-tac-toe:
#
# - Connect-4 is played with 6 rows and 7 columns, not 3
#   rows and 3 columns.
# - You must have 4 in a row (or column or diagonal) to win
#   instead of 3.
# - You may only place pieces in the bottom-most empty
#   space in a column (e.g. you "drop" the pieces in the
#   column and they fall to the first empty spot). Note,
#   though, that this shouldn't affect your reasoning.
#
#To keep things simple, we'll still use "X" and "O" to
#represent the players, and None to represent empty spots.
#You may assume there will be only one winner per board,
#no characters besides "X", "O", and None, and you don't
#have to worry about whether the board is actually a
#valid game of Connect 4.
#
#Hints:
# - Don't forget both kinds of diagonals, top-left to
#   bottom-right and bottom-left to top-right.
# - This board is too large to check every possible place
#   for a winner: there are 69 places a player could win.
# - Remember, if you put a negative index in a list,
#   Python "wraps around" and checks the last value. You
#   may have to control for this.


#Write your function here!

#The code below tests your function on three Connect-4
#boards. Remember, the line breaks are not needed to create
#a 2D tuple; they're used here just for readability.
def check_winner(a_tuple):
   
    m=6
    n=7
    
    o_wins_diagonal_LR=False
    x_wins_diagonal_LR=False
    o_wins_diagonal_RL=False
    x_wins_diagonal_RL=False
    
    o_wins_horizontal=False
    x_wins_horizontal=False
    
    o_wins_vertical=False
    x_wins_vertical=False
    
    # Checks if X or O win in horizontal order: 

    for sub in a_tuple:
        count_x=0
        count_o=0
        for f in sub:
            if f==None:
                count_o=0
                count_x=0
            elif f=="X":
                count_o=0
                count_x+=1
                if count_x==4:
                    x_wins_horizontal=True
                    #print('x_wins_horizontal:',True)
                    break
            else:
                count_x=0
                count_o+=1
                if count_o==4:
                    o_wins_horizontal=True
                    #print('o_wins_horizontal:',True)
                    break
                
    
    # Checks if X or O win in vertical order: 
    for i in range(0,7):
        count_x=0
        count_o=0
        for sub in a_tuple:
            cell=sub[i]
            
            if cell==None:
                count_x=0
                count_o=0
            elif cell=='X':
                count_o=0
                count_x+=1
                if count_x==4:
                    x_wins_vertical=True
                    #print('x_wins_vertical:',True)
                    break
            else:
                count_x=0
                count_o+=1
                if count_x==4:
                    o_wins_vertical=True
                    #print('o_wins_vertical:',True)
                    break

              
    # Checking whether X or O wins in diagonal order. 
        
    for k in range(0,m-1):
        count_x=0
        count_o=0
        i=k
        j=0
        while i>=0:
            cell=a_tuple[i][j]
            
            if cell==None:
                pass
            elif cell=='X':
                count_o=0
                count_x+=1
                if count_x==4:
                    x_wins_diagonal_LR=True
                    #print('x_wins_diagonal_LR:',True)
                    break
            else:
                count_x=0
                count_o+=1
                if count_o==4:
                    o_wins_diagonal_LR=True
                    #print('o_wins_diagonal_LR:',True)
                    break
            i=i-1
            j=j+1

                
    for k in range(0,n-1):
        count_x=0
        count_o=0
        j=k
        i=m-1
        while j<=n-1:
            cell=a_tuple[i][j]
            
            if cell==None:
                pass
            elif cell=='X':
                count_o=0
                count_x+=1
                if count_x==4:
                    x_wins_diagonal_LR=True
                    #print('x_wins_diagonal_LR:',True)
                    break
            else:
                count_x=0
                count_o+=1
                if count_o==4:
                    o_wins_diagonal_LR=True
                    #print('o_wins_diagonal_LR:',True)
                    break
            i=i-1
            j=j+1
           
    
    for k in range(0,m-1):
        count_x=0
        count_o=0
        j=n-1
        i=k
        while i>=0:
            cell=a_tuple[i][j]
            #print(cell)
            
            if cell==None:
                pass
            elif cell=='X':
                count_o=0
                count_x+=1
                if count_x==4:
                    x_wins_diagonal_RL=True
                    #print('x_wins_diagonal_RL:',True)
                    break
            else:
                count_x=0
                count_o+=1
                if count_o==4:
                    o_wins_diagonal_RL=True
                    #print('o_wins_diagonal_RL:',True)
                    break
            i=i-1
            j=j-1
                 
    for k in range(n-2,-1,-1):
        count_x=0
        count_o=0
        j=k
        i=m-1
        while j>=0:
            cell=a_tuple[i][j]
            #print(cell)
            
            if cell==None:
                pass
            elif cell=='X':
                count_o=0
                count_x+=1
                if count_x==4:
                    x_wins_diagonal_RL=True
                    #print('x_wins_diagonal_RL:',True)
                    break
            else:
                count_x=0
                count_o+=1
                if count_o==4:
                    o_wins_diagonal_RL=True
                    #print('o_wins_diagonal_RL:',True)
                    break
            i=i-1
            j=j-1
            
      

    if o_wins_diagonal_RL or o_wins_diagonal_LR or o_wins_horizontal or o_wins_vertical:
        return "O"
    elif x_wins_diagonal_RL or x_wins_diagonal_LR or x_wins_horizontal or x_wins_vertical:
        return "X"
    else:
        return None
    

xwins = ((None, None, None, None, None, None, None),
         (None, None, None, None, None, None, None),
         (None, None, None, None, "X" , None, None),
         (None, None, None, "X" , "O" , "O", None),
         (None, "O" , "X" , "X" , "O" , "X", None),
         ("O" , "X" , "O" , "O" , "O" , "X" , "X"))


owins = ((None, None, None, None, None, None, None),
         (None, None, None, None, None, None, None),
         ("O" , "X" , "X" , "X" , None, None, None),
         ("O" , "O" , "O" , "X" , None, None, None),
         ("X" , "X" , "O" , "O" , "X" , None, None),
         ("X" , "X" , "O" , "O" , "O" , None, None))

nowins =(("X" , "X" , None, None, None, None, None),
         ("O" , "O" , None, None, None, None, None),
         ("O" , "X" , "O" , "O" , None, "O" , "O" ),
         ("O" , "X" , "X" , "X" , None, "X" , "X" ),
         ("X" , "X" , "X" , "O" , "X" , "X" , "O" ),
         ("X" , "O" , "O" , "X" , "O" , "X" , "O" ))
 
    
print(check_winner(xwins))
print(check_winner(owins))
print(check_winner(nowins))


